"use strict";
var fetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(fetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

//
// Copyright (c) 2017 by Fedir Bobylev. All Rights Reserved.
//

var GoogleImageSearch = function () {
    function GoogleImageSearch() {
        _classCallCheck(this, GoogleImageSearch);
    }

    _createClass(GoogleImageSearch, null, [{
        key: "searchImage",


        /**
         * Function for image search
         *
         * @param  {string} query   Image search filed query
         * @return {Promise}        Returns a promise, with an array of found image URL's
         */
        value: function searchImage(query) {
            var _this = this;

            query = encodeURIComponent(query);

            return new Promise(function (resolve, reject) {

                // Fetches Items from Google Image Search URL
                fetch("https://crossorigin.me/https://www.google.com.ua/search?source=lnms&sa=X&gbv=1&tbm=isch&q=" + query).then(function (res) {
                    return res.text();
                }).then(function (res) {

                    // Transforms HTML string into DOM object
                    var parser = new DOMParser();
                    parser = parser.parseFromString(res, "text/html");

                    // Gets DOM element with image results
                    var images = parser.getElementById("ires").childNodes[0];

                    if (images.nodeName === "DIV") {

                        resolve(_this.googleGetMobile(images));
                    } else if (images.nodeName === "TABLE") {

                        resolve(_this.googleGetDesktop(images));
                    } else {

                        reject("Unknown System");
                    }
                }).catch(function (err) {
                    return reject(err);
                });
            });
        }

        /**
         * Traverses DOM tree in mobile layout
         *
         * @param  {NodeList} images    Children of "ires" container
         * @return {Array}              Array of found images URL's
         */

    }, {
        key: "googleGetMobile",
        value: function googleGetMobile(images) {

            // Transforms DOM NodeList of images into Array.
            // Needed to use .map method
            images = Array.from(images.childNodes);

            // Maps Image Sources
            return images.map(function (imgDiv) {
                console.log(imgDiv.getAttribute("href"));
                return imgDiv.childNodes[0].src;
            });
        }

        /**
         * Traverses DOM tree in desktop layout
         *
         * @param  {NodeList} images    Children of "ires" container
         * @return {Array}              Array of found images URLs
         */

    }, {
        key: "googleGetDesktop",
        value: function googleGetDesktop(images) {

            // NodeList of table rows
            images = images.childNodes[0].childNodes;

            // Empty List of image URLs
            var imgSrc = [];

            // Traverses table node for images
            images.forEach(function (tRow) {
                tRow = tRow.childNodes;
                tRow.forEach(function (tCol) {
                    var aLink = tCol.childNodes[0].childNodes[0];
                    imgSrc.push(aLink.src);
                });
            });

            return imgSrc;
        }
    }]);

    return GoogleImageSearch;
}();

exports.default = GoogleImageSearch;